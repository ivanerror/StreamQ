Metadata-Version: 2.4
Name: streamq
Version: 1.0.0
Summary: Queue and download video/audio from YouTube using yt-dlp with a clean GUI
Home-page: https://github.com/ivanerror/streamq
Author: ivanerror
Author-email: ivanerror <contact@example.com>
License: MIT
Project-URL: Homepage, https://github.com/ivanerror/streamq
Project-URL: Repository, https://github.com/ivanerror/streamq.git
Project-URL: Issues, https://github.com/ivanerror/streamq/issues
Keywords: youtube,download,video,audio,yt-dlp,gui,tkinter
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: End Users/Desktop
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Multimedia :: Video
Classifier: Topic :: Internet :: WWW/HTTP
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: yt-dlp>=2025.09.26
Requires-Dist: brotli
Requires-Dist: mutagen
Requires-Dist: pycryptodomex
Requires-Dist: websockets
Requires-Dist: ttkbootstrap>=1.10.1
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# StreamQ

StreamQ is a modern desktop application for queuing and downloading video/audio from YouTube using `yt-dlp`, wrapped in a clean Tkinter-based GUI. The application follows Python best practices with a modular architecture for maintainability and extensibility.

## Features

- ✨ Clean, modern GUI interface
- 📥 Queue multiple YouTube downloads
- 🎵 Audio downloads (MP3 format)
- 🎬 Video downloads (MP4 format) 
- ⚡ Automatic FFmpeg setup on Windows
- 📊 Real-time download progress tracking
- 🔄 Background title fetching
- 📁 Auto-open download folder on completion

## Prerequisites

- **Python 3.8+** installed on your system
- **Windows 10/11** recommended; macOS/Linux also supported
- **Internet connection** (for dependencies and FFmpeg download)
- **Git** (optional, for development)

## Quick Start

### Option 1: Using the Convenience Script (Windows)

The easiest way to get started:

1. Double-click [`run.bat`](run.bat) from File Explorer, or run it from terminal:
   ```bat
   run.bat
   ```

2. The script automatically:
   - Creates a virtual environment at `.venv/`
   - Installs all dependencies from [`requirements.txt`](requirements.txt)
   - Launches the StreamQ GUI application

### Option 2: Manual Installation

For more control or non-Windows platforms:

```bash
# Create and activate virtual environment
python -m venv .venv

# Windows
.venv\Scripts\activate

# macOS/Linux
source .venv/bin/activate

# Install dependencies
python -m pip install --upgrade pip
pip install -r requirements.txt

# Run the application
python main.py
```

### Option 3: Install as Python Package

Install StreamQ as a proper Python package:

```bash
# Install in development mode
pip install -e .

# Or install from source
pip install .

# Run from anywhere
streamq
```

## Project Structure

StreamQ follows modern Python packaging best practices with a clean, modular architecture:

```
streamq/
├── src/streamq/                 # Main package source
│   ├── __init__.py             # Package initialization
│   ├── __main__.py             # Entry point for module execution
│   ├── config.py               # Configuration management
│   ├── core/                   # Core application modules
│   │   ├── __init__.py
│   │   ├── app.py              # Main GUI application
│   │   └── downloader.py       # Download logic & queue management
│   └── utils/                  # Utility modules
│       ├── __init__.py
│       └── ffmpeg.py           # FFmpeg handling utilities
├── main.py                     # Standalone entry point script
├── pyproject.toml              # Modern Python packaging configuration
├── setup.py                    # Fallback setup script
├── requirements.txt            # Python dependencies
├── run.bat                     # Windows convenience script
├── .gitignore                  # Git ignore patterns
├── LICENSE                     # MIT License
├── MANIFEST.in                 # Package manifest
└── README.md                   # This file
```

### Key Architectural Improvements

- **Separation of Concerns**: GUI, download logic, and utilities are cleanly separated
- **Configuration Management**: Centralized configuration system
- **Modular Design**: Easy to extend and maintain
- **Package Structure**: Follows Python packaging best practices
- **Entry Points**: Multiple ways to run the application
- **Type Safety**: Structured for future type annotation support

## Usage

1. **Launch StreamQ**: Use any of the installation methods above
2. **Add URLs**: Paste YouTube URLs and click "Add to Queue"
3. **Choose Format**: Select Audio (MP3) or Video (MP4)
4. **Select Quality**: Pick your preferred quality setting
5. **Download**: Click "Start Download" to process the queue

### Output Locations

- **Audio files**: [`py_downloader/audio/`](py_downloader/audio/)
- **Video files**: [`py_downloader/video/`](py_downloader/video/)
- **FFmpeg binaries**: [`ffmpeg_support/`](ffmpeg_support/) (Windows only)

## Development

### Setting up Development Environment

```bash
# Clone the repository
git clone https://github.com/ivanerror/streamq.git
cd streamq

# Install in development mode with optional dependencies
pip install -e .[dev]

# Or manually install dev dependencies
pip install pytest black isort flake8 mypy
```

### Running Tests

```bash
# Run tests
pytest

# Run with coverage
pytest --cov=streamq
```

### Code Quality

```bash
# Format code
black src/

# Sort imports
isort src/

# Lint code
flake8 src/

# Type checking
mypy src/
```

## Platform-Specific Notes

### Windows
- FFmpeg is automatically downloaded and configured on first run
- Uses native Windows styling themes when available

### macOS/Linux
- **Manual FFmpeg installation required**:
  - macOS: `brew install ffmpeg`
  - Ubuntu/Debian: `sudo apt install ffmpeg`
  - Ensure `ffmpeg` and `ffprobe` are in your system `PATH`

## Git Repository Setup

If you haven't initialized Git yet and want to push to GitHub:

```bash
# Initialize repository
git init
git branch -M main

# Add files (download outputs are automatically ignored)
git add .
git commit -m "Initial commit with improved project structure"

# Connect to GitHub repository
git remote add origin https://github.com/<username>/<repo>.git
git push -u origin main
```

Or using GitHub CLI:

```bash
gh repo create <username>/<repo> --source . --public --push
```

## Troubleshooting

### Common Issues

**Python not found**
```bash
python --version  # Should show Python 3.8+
```

**Dependency installation failed**
- Check internet connection
- Try: `python -m pip install --upgrade pip`
- Rerun installation

**FFmpeg missing (macOS/Linux)**
- Install FFmpeg: `brew install ffmpeg` (macOS) or `sudo apt install ffmpeg` (Ubuntu)
- Ensure FFmpeg is in PATH: `ffmpeg -version`

**Download failed**
- Verify the YouTube URL is valid
- Update yt-dlp: `pip install -U yt-dlp`
- Check internet connection

**Import errors**
- Ensure virtual environment is activated
- Reinstall: `pip install -e .`

### Getting Help

1. Check the [Issues](https://github.com/ivanerror/streamq/issues) page
2. Create a new issue with:
   - Your operating system
   - Python version (`python --version`)
   - Error message or description
   - Steps to reproduce

## Contributing

Contributions are welcome! Please:

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Follow the code style (run `black` and `isort`)
4. Add tests if applicable
5. Commit your changes (`git commit -m 'Add amazing feature'`)
6. Push to the branch (`git push origin feature/amazing-feature`)
7. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Acknowledgments

- [yt-dlp](https://github.com/yt-dlp/yt-dlp) - The excellent YouTube downloader library
- [FFmpeg](https://ffmpeg.org/) - For media processing capabilities
- The Python community for excellent packaging tools and practices

---

**StreamQ** - Simple, reliable YouTube downloading with a modern Python architecture.
